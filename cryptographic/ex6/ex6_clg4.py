

import gmpy2

## Challenge #1
print '\n\n','Challenge #1 is solved as following:\n'

N = gmpy2.mpz('17976931348623159077293051907890247336179769789423065727343008115'
        '77326758055056206869853794492129829595855013875371640157101398586'
        '47833778606925583497541085196591615128057575940752635007475935288'
        '71082364994994077189561705436114947486504671101510156394068052754'
        '0071584560878577663743040086340742855278549092581')



A = gmpy2.isqrt(N) + 1

x_power = A**2 - N

x = gmpy2.isqrt(x_power)

p = A - x
q = A + x


print 'p = ',p
print 'q = ',q



print '\n\n','-----------------------PKC1.5 decrypt challenge--------------------\n'

ct = gmpy2.mpz('220964518674103817763065611348834180174100697878928310717318391'
         '436761356001205380042823296504735094243439462197515122564658399'
         '679428894607645420405815647489880137348641204523252293201764879'
         '166664029975091887299716905260832220677716000193292608700095799'
         '93724077458967773697817571267229951148662959627934791540')

enc_exp = 65537

phi_N = (p - 1) * (q - 1)

dec_exp = gmpy2.invert(enc_exp,phi_N)

rsa_dec = gmpy2.powmod(ct,dec_exp,N)

print 'rs_dec number is \n',rsa_dec,'\n'


rsa_dec_hex = gmpy2.digits(rsa_dec,16)

print '\n hex form is \n',rsa_dec_hex

msg = '466163746f72696e67206c65747320757320627265616b205253412e'

msg_len = len(msg)

print msg_len

